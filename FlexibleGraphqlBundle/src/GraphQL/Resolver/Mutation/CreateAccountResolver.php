<?php

declare (strict_types=1);
namespace App\GraphQL\Resolver\Mutation;

use App\Entity\Account;
use App\GraphQL\Mapper\EntityToGQLModel;
use App\GraphQL\Model\AccountType;
use App\GraphQL\Model\CodedCurrencyType;
use App\GraphQL\Model\NamedCurrencyType;
use App\Repository\AccountRepository;
use App\Repository\CodedCurrencyRepository;
use App\Repository\NamedCurrencyRepository;
use GraphQL\Type\Definition\ResolveInfo;
use Axtiva\FlexibleGraphql\Resolver\ResolverInterface;

/**
 * This code is @generated by axtiva/flexible-graphql-php
 * This is resolver for Mutation.createAccount
 */
final class CreateAccountResolver implements ResolverInterface
{
    private AccountRepository $accountRepository;
    private CodedCurrencyRepository $codedCurrencyRepository;
    private NamedCurrencyRepository $namedCurrencyRepository;

    public function __construct(
        AccountRepository $accountRepository,
        CodedCurrencyRepository $codedCurrencyRepository,
        NamedCurrencyRepository $namedCurrencyRepository,
    ) {
        $this->accountRepository = $accountRepository;
        $this->codedCurrencyRepository = $codedCurrencyRepository;
        $this->namedCurrencyRepository = $namedCurrencyRepository;
    }

    function __invoke($rootValue, $args, $context, ResolveInfo $info)
    {
        $account = new Account($args['number']);
        $response = new AccountType();

        $destiny = rand(0,1);

        if ($destiny) {
            $currency = $this->codedCurrencyRepository->getEntity(4321);
            $account->setCodedCurrency($currency);
            $response->currency = new CodedCurrencyType();
            $response->currency->code = $currency->getCode();
        } else {
            $currency = $this->namedCurrencyRepository->getEntity('fdsa');
            $account->setNamedCurrency($currency);
            $response->currency = new NamedCurrencyType();
            $response->currency->name = $currency->getName();
        }

        $this->accountRepository->save($account);

        EntityToGQLModel::account($account, $response);

        return $response;
    }
}