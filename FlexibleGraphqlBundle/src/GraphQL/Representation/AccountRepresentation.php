<?php

declare (strict_types=1);
namespace App\GraphQL\Representation;

use App\GraphQL\Mapper\EntityToGQLModel;
use App\GraphQL\Model\AccountType;
use App\Repository\AccountRepository;
use GraphQL\Type\Definition\ResolveInfo;
use Axtiva\FlexibleGraphql\Federation\Representation;
use Axtiva\FlexibleGraphql\Federation\Resolver\FederationRepresentationResolverInterface;

/**
 * This code is @generated by axtiva/flexible-graphql-php
 * Representation resolver for federated graphql type Account
 */
final class AccountRepresentation implements FederationRepresentationResolverInterface
{
    private AccountRepository $accountRepository;

    public function __construct(AccountRepository $accountRepository)
    {
        $this->accountRepository = $accountRepository;
    }

    public function getTypeName(): string
    {
        return 'Account';
    }

    public function __invoke(Representation $representation, $context, ResolveInfo $info)
    {
        $id = $representation->getFields()['id']; // array from Account type @key(fields: "id")
        $entity = $this->accountRepository->find($id);
        if ($entity) {
            $response = new AccountType();
            EntityToGQLModel::account($entity, $response);
            return $response;
        }

        return null;
    }
}