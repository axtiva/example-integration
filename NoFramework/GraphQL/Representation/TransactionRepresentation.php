<?php

declare (strict_types=1);
namespace SelfWritten\GraphQL\Representation;

use GraphQL\Type\Definition\ResolveInfo;
use Axtiva\FlexibleGraphql\Federation\Representation;
use Axtiva\FlexibleGraphql\Federation\Resolver\FederationRepresentationResolverInterface;
use Axtiva\FlexibleGraphql\Generator\Exception\NotImplementedResolver;
use SelfWritten\GraphQL\Mapper\EntityToGQLModel;
use SelfWritten\GraphQL\Model\TransactionType;
use SelfWritten\Repository\TransactionRepository;
use Symfony\Component\Uid\Uuid;
use Symfony\Component\Uid\UuidV6;

/**
 * This code is @generated by axtiva/flexible-graphql-php
 * Representation resolver for federated graphql type Transaction
 */
final class TransactionRepresentation implements FederationRepresentationResolverInterface
{
    public function getTypeName(): string
    {
        return 'Transaction';
    }

    public function __invoke(Representation $representation, $context, ResolveInfo $info)
    {
        $entity = (new TransactionRepository())->findById(UuidV6::fromString($representation->getFields()['id']));
        if ($entity) {
            $response = new TransactionType();
            EntityToGQLModel::transaction($entity, $response);

            return $response;
        }

        return null;
    }
}